.. _app:

==============
Guestbook Demo
==============

.. note::

   1. 以下所以shell命令都是在root用户下执行
   2. Kubernetes集群环境已搭建好，请参考 :ref:`kubernetes-cluster-environment`
   3. kube-dns部署在Kubernetes集群中

.. end

Prerequisites
~~~~~~~~~~~~~

+-----------------------------------------------------+--------------------------------------+
| docker镜像                                          | version                              |
+-----------------------------------------------------+--------------------------------------+
| gcr.io/google-samples/gb-frontend                   | ``v4``                               |
+-----------------------------------------------------+--------------------------------------+
| gcr.io/google_containers/redis                      | ``e2e``                              |
+-----------------------------------------------------+--------------------------------------+
| gcr.io/google-samples/gb-frontend                   | ``v4``                               |
+-----------------------------------------------------+--------------------------------------+


Deploy
~~~~~~

#. 准备frontend.yaml文件:

   .. code-block:: yaml

      apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
      kind: Deployment
      metadata:
        name: frontend
      spec:
        selector:
          matchLabels:
            app: guestbook
            tier: frontend
        replicas: 3
        template:
          metadata:
            labels:
              app: guestbook
              tier: frontend
          spec:
            containers:
            - name: php-redis
              image: gcr.io/google-samples/gb-frontend:v4
              resources:
                requests:
                  cpu: 100m
                  memory: 100Mi
              env:
              - name: GET_HOSTS_FROM
                value: dns
                # Using `GET_HOSTS_FROM=dns` requires your cluster to
                # provide a dns service. As of Kubernetes 1.3, DNS is a built-in
                # service launched automatically. However, if the cluster you are using
                # does not have a built-in DNS service, you can instead
                # instead access an environment variable to find the master
                # service's host. To do so, comment out the 'value: dns' line above, and
                # uncomment the line below:
                # value: env
              ports:
              - containerPort: 80

      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: frontend
        labels:
          app: guestbook
          tier: frontend
      spec:
        # comment or delete the following line if you want to use a LoadBalancer
        type: NodePort 
        # if your cluster supports it, uncomment the following to automatically create
        # an external load-balanced IP for the frontend service.
        # type: LoadBalancer
        ports:
        - port: 80
        selector:
          app: guestbook
          tier: frontend

   .. end


#. 准备redis-slave.yaml文件:

   .. code-block:: yaml

      apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
      kind: Deployment
      metadata:
        name: redis-slave
      spec:
        selector:
          matchLabels:
            app: redis
            role: slave
            tier: backend
        replicas: 2
        template:
          metadata:
            labels:
              app: redis
              role: slave
              tier: backend
          spec:
            containers:
            - name: slave
              image: gcr.io/google_samples/gb-redisslave:v1
              resources:
                requests:
                  cpu: 100m
                  memory: 100Mi
              env:
              - name: GET_HOSTS_FROM
                value: dns
                # Using `GET_HOSTS_FROM=dns` requires your cluster to
                # provide a dns service. As of Kubernetes 1.3, DNS is a built-in
                # service launched automatically. However, if the cluster you are using
                # does not have a built-in DNS service, you can instead
                # instead access an environment variable to find the master
                # service's host. To do so, comment out the 'value: dns' line above, and
                # uncomment the line below:
                # value: env
              ports:
              - containerPort: 6379

      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: redis-slave
        labels:
          app: redis
          role: slave
          tier: backend
      spec:
        ports:
        - port: 6379
        selector:
          app: redis
          role: slave
          tier: backend

   .. end


#. 准备redis-master.yaml文件:

   .. code-block:: yaml

      kind: Deployment
      metadata:
        name: redis-master
      spec:
        selector:
          matchLabels:
            app: redis
            role: master
            tier: backend
        replicas: 1
        template:
          metadata:
            labels:
              app: redis
              role: master
              tier: backend
          spec:
            containers:
            - name: master
              image: gcr.io/google_containers/redis:e2e  # or just image: redis
              resources:
                requests:
                  cpu: 100m
                  memory: 100Mi
              ports:
              - containerPort: 6379
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: redis-master
        labels:
          app: redis
          role: master
          tier: backend
      spec:
        ports:
        - port: 6379
          targetPort: 6379
        selector:
          app: redis
          role: master
          tier: backend


#. create pod from frontend.yaml redis-slave.yaml redis-master.yaml

   .. code-block:: console

      [root@master ~]# kubectl create -f frontend.yaml
      [root@master ~]# kubectl create -f redis-slave.yaml
      [root@master ~]# kubectl create -f redis-master.yaml

   .. end



Verify
~~~~~~

#. check pod's status is ready

   .. code-block:: console

        # kubectl get pod
        NAME                            READY     STATUS             RESTARTS   AGE
        frontend-685d7ff496-b4fnr       1/1       Running            0          9h
        iperf-76c6648fd4-rvsh6          0/1       CrashLoopBackOff   91         7h
        iperf-tmp-6f7cd88f74-bkmc6      1/1       Running            1          7h
        redis-master-57cc594f67-ggkz2   1/1       Running            0          9h
        redis-slave-84845b8fd8-dsz2q    1/1       Running            0          9h


   .. end



